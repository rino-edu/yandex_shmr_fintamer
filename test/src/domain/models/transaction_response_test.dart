import 'package:flutter_test/flutter_test.dart';
import 'package:fintamer/src/domain/models/account_brief.dart';
import 'package:fintamer/src/domain/models/category.dart';
import 'package:fintamer/src/domain/models/transaction_response.dart';

void main() {
  group('TransactionResponse Model Tests', () {
    // 1. Arrange: –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ

    // –≠—Ç–∞–ª–æ–Ω–Ω—ã–π Dart-–æ–±—ä–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –º—ã –æ–∂–∏–¥–∞–µ–º –ø–æ–ª—É—á–∏—Ç—å
    final tTransactionResponseModel = TransactionResponse(
      id: 1,
      account: const AccountBrief(
        id: 10,
        name: '–û—Å–Ω–æ–≤–Ω–æ–π —Å—á—ë—Ç',
        balance: '10000.00',
        currency: 'RUB',
      ),
      category: const Category(
        id: 20,
        name: '–ü—Ä–æ–¥—É–∫—Ç—ã',
        emoji: 'üõí',
        isIncome: false,
      ),
      amount: '250.50',
      transactionDate: DateTime.parse("2024-07-29T10:00:00.000Z"),
      comment: '–ü–æ–∫—É–ø–∫–∞ –≤ –º–∞–≥–∞–∑–∏–Ω–µ',
      createdAt: DateTime.parse("2024-07-29T10:00:05.000Z"),
      updatedAt: DateTime.parse("2024-07-29T10:00:05.000Z"),
    );

    // –≠—Ç–∞–ª–æ–Ω–Ω—ã–π JSON, –∫–æ—Ç–æ—Ä—ã–π –º—ã –∫–∞–∫ –±—É–¥—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
    final tTransactionResponseJson = {
      "id": 1,
      "account": {
        "id": 10,
        "name": "–û—Å–Ω–æ–≤–Ω–æ–π —Å—á—ë—Ç",
        "balance": "10000.00",
        "currency": "RUB"
      },
      "category": {
        "id": 20,
        "name": "–ü—Ä–æ–¥—É–∫—Ç—ã",
        "emoji": "üõí",
        "isIncome": false
      },
      "amount": "250.50",
      "transactionDate": "2024-07-29T10:00:00.000Z",
      "comment": "–ü–æ–∫—É–ø–∫–∞ –≤ –º–∞–≥–∞–∑–∏–Ω–µ",
      "createdAt": "2024-07-29T10:00:05.000Z",
      "updatedAt": "2024-07-29T10:00:05.000Z"
    };


    test('fromJson –¥–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –º–æ–¥–µ–ª—å –∏–∑ JSON', () {
      // 2. Act: –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
      final result = TransactionResponse.fromJson(tTransactionResponseJson);

      // 3. Assert: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      // –ú—ã –æ–∂–∏–¥–∞–µ–º, —á—Ç–æ –º–æ–¥–µ–ª—å, —Å–æ–∑–¥–∞–Ω–Ω–∞—è –∏–∑ JSON, –±—É–¥–µ—Ç –∏–¥–µ–Ω—Ç–∏—á–Ω–∞ –Ω–∞—à–µ–º—É —ç—Ç–∞–ª–æ–Ω–Ω–æ–º—É –æ–±—ä–µ–∫—Ç—É
      expect(result, tTransactionResponseModel);
    });

    test('toJson –¥–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞—Ç—å –º–æ–¥–µ–ª—å –≤ JSON', () {
      // 2. Act: –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
      final result = tTransactionResponseModel.toJson();

      // 3. Assert: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      // –ú—ã –æ–∂–∏–¥–∞–µ–º, —á—Ç–æ JSON, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∏–∑ –Ω–∞—à–µ–π –º–æ–¥–µ–ª–∏, –±—É–¥–µ—Ç –∏–¥–µ–Ω—Ç–∏—á–µ–Ω —ç—Ç–∞–ª–æ–Ω–Ω–æ–º—É JSON
      expect(result, tTransactionResponseJson);
    });
  });
}